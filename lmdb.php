<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('lmdb')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_lmdb.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('lmdb.so')) return;
    } else {
      if (!dl('lmdb.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class lmdb {
	const MDB_VERSION_MAJOR = MDB_VERSION_MAJOR;

	const MDB_VERSION_MINOR = MDB_VERSION_MINOR;

	const MDB_VERSION_PATCH = MDB_VERSION_PATCH;

	const MDB_VERSION_FULL = MDB_VERSION_FULL;

	const MDB_VERSION_DATE = MDB_VERSION_DATE;

	const MDB_VERSION_STRING = MDB_VERSION_STRING;

	const MDB_FIXEDMAP = MDB_FIXEDMAP;

	const MDB_NOSUBDIR = MDB_NOSUBDIR;

	const MDB_NOSYNC = MDB_NOSYNC;

	const MDB_RDONLY = MDB_RDONLY;

	const MDB_NOMETASYNC = MDB_NOMETASYNC;

	const MDB_WRITEMAP = MDB_WRITEMAP;

	const MDB_MAPASYNC = MDB_MAPASYNC;

	const MDB_NOTLS = MDB_NOTLS;

	const MDB_NOLOCK = MDB_NOLOCK;

	const MDB_NORDAHEAD = MDB_NORDAHEAD;

	const MDB_NOMEMINIT = MDB_NOMEMINIT;

	const MDB_REVERSEKEY = MDB_REVERSEKEY;

	const MDB_DUPSORT = MDB_DUPSORT;

	const MDB_INTEGERKEY = MDB_INTEGERKEY;

	const MDB_DUPFIXED = MDB_DUPFIXED;

	const MDB_INTEGERDUP = MDB_INTEGERDUP;

	const MDB_REVERSEDUP = MDB_REVERSEDUP;

	const MDB_CREATE = MDB_CREATE;

	const MDB_NOOVERWRITE = MDB_NOOVERWRITE;

	const MDB_NODUPDATA = MDB_NODUPDATA;

	const MDB_CURRENT = MDB_CURRENT;

	const MDB_RESERVE = MDB_RESERVE;

	const MDB_APPEND = MDB_APPEND;

	const MDB_APPENDDUP = MDB_APPENDDUP;

	const MDB_MULTIPLE = MDB_MULTIPLE;

	const MDB_CP_COMPACT = MDB_CP_COMPACT;

	const MDB_FIRST = 0;

	const MDB_FIRST_DUP = MDB_FIRST_DUP;

	const MDB_GET_BOTH = MDB_GET_BOTH;

	const MDB_GET_BOTH_RANGE = MDB_GET_BOTH_RANGE;

	const MDB_GET_CURRENT = MDB_GET_CURRENT;

	const MDB_GET_MULTIPLE = MDB_GET_MULTIPLE;

	const MDB_LAST = MDB_LAST;

	const MDB_LAST_DUP = MDB_LAST_DUP;

	const MDB_NEXT = MDB_NEXT;

	const MDB_NEXT_DUP = MDB_NEXT_DUP;

	const MDB_NEXT_MULTIPLE = MDB_NEXT_MULTIPLE;

	const MDB_NEXT_NODUP = MDB_NEXT_NODUP;

	const MDB_PREV = MDB_PREV;

	const MDB_PREV_DUP = MDB_PREV_DUP;

	const MDB_PREV_NODUP = MDB_PREV_NODUP;

	const MDB_SET = MDB_SET;

	const MDB_SET_KEY = MDB_SET_KEY;

	const MDB_SET_RANGE = MDB_SET_RANGE;

	const MDB_SUCCESS = MDB_SUCCESS;

	const MDB_KEYEXIST = MDB_KEYEXIST;

	const MDB_NOTFOUND = MDB_NOTFOUND;

	const MDB_PAGE_NOTFOUND = MDB_PAGE_NOTFOUND;

	const MDB_CORRUPTED = MDB_CORRUPTED;

	const MDB_PANIC = MDB_PANIC;

	const MDB_VERSION_MISMATCH = MDB_VERSION_MISMATCH;

	const MDB_INVALID = MDB_INVALID;

	const MDB_MAP_FULL = MDB_MAP_FULL;

	const MDB_DBS_FULL = MDB_DBS_FULL;

	const MDB_READERS_FULL = MDB_READERS_FULL;

	const MDB_TLS_FULL = MDB_TLS_FULL;

	const MDB_TXN_FULL = MDB_TXN_FULL;

	const MDB_CURSOR_FULL = MDB_CURSOR_FULL;

	const MDB_PAGE_FULL = MDB_PAGE_FULL;

	const MDB_MAP_RESIZED = MDB_MAP_RESIZED;

	const MDB_INCOMPATIBLE = MDB_INCOMPATIBLE;

	const MDB_BAD_RSLOT = MDB_BAD_RSLOT;

	const MDB_BAD_TXN = MDB_BAD_TXN;

	const MDB_BAD_VALSIZE = MDB_BAD_VALSIZE;

	const MDB_BAD_DBI = MDB_BAD_DBI;

	const MDB_LAST_ERRCODE = MDB_LAST_ERRCODE;

	static function mdb_version($major,$minor,$patch) {
		return mdb_version($major,$minor,$patch);
	}

	static function mdb_strerror($err) {
		return mdb_strerror($err);
	}

	static function mdb_env_copy($env,$path) {
		return mdb_env_copy($env,$path);
	}

	static function mdb_env_copyfd($env,$fd) {
		return mdb_env_copyfd($env,$fd);
	}

	static function mdb_env_copy2($env,$path,$flags) {
		return mdb_env_copy2($env,$path,$flags);
	}

	static function mdb_env_copyfd2($env,$fd,$flags) {
		return mdb_env_copyfd2($env,$fd,$flags);
	}

	static function mdb_env_sync($env,$force) {
		return mdb_env_sync($env,$force);
	}

	static function mdb_env_close($env) {
		mdb_env_close($env);
	}

	static function mdb_env_set_flags($env,$flags,$onoff) {
		return mdb_env_set_flags($env,$flags,$onoff);
	}

	static function mdb_env_set_mapsize($env,$size) {
		return mdb_env_set_mapsize($env,$size);
	}

	static function mdb_env_set_maxreaders($env,$readers) {
		return mdb_env_set_maxreaders($env,$readers);
	}

	static function mdb_env_set_maxdbs($env,$dbs) {
		return mdb_env_set_maxdbs($env,$dbs);
	}

	static function mdb_env_get_maxkeysize($env) {
		return mdb_env_get_maxkeysize($env);
	}

	static function mdb_env_get_userctx($env) {
		return mdb_env_get_userctx($env);
	}

	static function mdb_txn_env($txn) {
		return mdb_txn_env($txn);
	}

	static function mdb_txn_commit($txn) {
		return mdb_txn_commit($txn);
	}

	static function mdb_txn_abort($txn) {
		mdb_txn_abort($txn);
	}

	static function mdb_txn_reset($txn) {
		mdb_txn_reset($txn);
	}

	static function mdb_txn_renew($txn) {
		return mdb_txn_renew($txn);
	}

	static function mdb_dbi_close($env,$dbi) {
		mdb_dbi_close($env,$dbi);
	}

	static function mdb_drop($txn,$dbi,$del) {
		return mdb_drop($txn,$dbi,$del);
	}

	static function mdb_get($txn,$dbi,$key,$data) {
		return mdb_get($txn,$dbi,$key,$data);
	}

	static function mdb_put($txn,$dbi,$key,$data,$flags) {
		return mdb_put($txn,$dbi,$key,$data,$flags);
	}

	static function mdb_del($txn,$dbi,$key,$data) {
		return mdb_del($txn,$dbi,$key,$data);
	}

	static function mdb_cursor_close($cursor) {
		mdb_cursor_close($cursor);
	}

	static function mdb_cursor_renew($txn,$cursor) {
		return mdb_cursor_renew($txn,$cursor);
	}

	static function mdb_cursor_txn($cursor) {
		return mdb_cursor_txn($cursor);
	}

	static function mdb_cursor_dbi($cursor) {
		return mdb_cursor_dbi($cursor);
	}

	static function mdb_cursor_get($cursor,$key,$data,$op) {
		return mdb_cursor_get($cursor,$key,$data,$op);
	}

	static function mdb_cursor_put($cursor,$key,$data,$flags) {
		return mdb_cursor_put($cursor,$key,$data,$flags);
	}

	static function mdb_cursor_del($cursor,$flags) {
		return mdb_cursor_del($cursor,$flags);
	}

	static function mdb_cmp($txn,$dbi,$a,$b) {
		return mdb_cmp($txn,$dbi,$a,$b);
	}

	static function mdb_dcmp($txn,$dbi,$a,$b) {
		return mdb_dcmp($txn,$dbi,$a,$b);
	}

	static function mdb_reader_list($env,$func,$ctx) {
		return mdb_reader_list($env,$func,$ctx);
	}

	static function mdb_env_info($env) {
		$r=mdb_env_info($env);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new MDB_envinfo($r);
		}
		return $r;
	}

	static function mdb_env_stat($env) {
		$r=mdb_env_stat($env);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new MDB_stat($r);
		}
		return $r;
	}

	static function mdb_set_relctx($txn,$dbi,$value) {
		return mdb_set_relctx($txn,$dbi,$value);
	}

	static function mdb_stat($txn,$dbi) {
		$r=mdb_stat($txn,$dbi);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new MDB_stat($r);
		}
		return $r;
	}

	static function mdb_reader_check($env) {
		return mdb_reader_check($env);
	}

	static function mdb_cursor_count($cursor) {
		return mdb_cursor_count($cursor);
	}

	static function mdb_dbi_flags($txn,$dbi) {
		return mdb_dbi_flags($txn,$dbi);
	}

	static function mdb_env_set_userctx($env,$value) {
		return mdb_env_set_userctx($env,$value);
	}

	static function mdb_env_get_userctx_swig($env) {
		return mdb_env_get_userctx_swig($env);
	}

	static function mdb_env_get_flags($env) {
		return mdb_env_get_flags($env);
	}

	static function mdb_env_get_path($env) {
		return mdb_env_get_path($env);
	}

	static function mdb_env_get_fd($env) {
		return mdb_env_get_fd($env);
	}

	static function mdb_env_get_maxreaders($env) {
		return mdb_env_get_maxreaders($env);
	}

	static function mdb_env_create() {
		return mdb_env_create();
	}

	static function mdb_env_open($env,$path,$flags,$mode) {
		return mdb_env_open($env,$path,$flags,$mode);
	}

	static function mdb_txn_begin($env,$parent,$flags) {
		return mdb_txn_begin($env,$parent,$flags);
	}

	static function mdb_dbi_open($txn,$name,$flags) {
		return mdb_dbi_open($txn,$name,$flags);
	}

	static function mdb_cursor_open($txn,$dbi) {
		return mdb_cursor_open($txn,$dbi);
	}

	static function mdb_val_create($value) {
		$r=mdb_val_create($value);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new MDB_val($r);
		}
		return $r;
	}

	static function mdb_val_size($key) {
		return mdb_val_size($key);
	}

	static function mdb_val_data($key) {
		return mdb_val_data($key);
	}

	static function mdb_stat_psize($stat) {
		return mdb_stat_psize($stat);
	}

	static function mdb_stat_depth($stat) {
		return mdb_stat_depth($stat);
	}

	static function mdb_stat_branch_pages($stat) {
		return mdb_stat_branch_pages($stat);
	}

	static function mdb_stat_leaf_pages($stat) {
		return mdb_stat_leaf_pages($stat);
	}

	static function mdb_stat_overflow_pages($stat) {
		return mdb_stat_overflow_pages($stat);
	}

	static function mdb_stat_entries($stat) {
		return mdb_stat_entries($stat);
	}

	static function mdb_info_mapaddr($info) {
		return mdb_info_mapaddr($info);
	}

	static function mdb_info_mapsize($info) {
		return mdb_info_mapsize($info);
	}

	static function mdb_info_last_pgno($info) {
		return mdb_info_last_pgno($info);
	}

	static function mdb_info_last_txnid($info) {
		return mdb_info_last_txnid($info);
	}

	static function mdb_info_maxreaders($info) {
		return mdb_info_maxreaders($info);
	}

	static function mdb_info_numreaders($info) {
		return mdb_info_numreaders($info);
	}
}

/* PHP Proxy Classes */
class MDB_val {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'mv_size') return MDB_val_mv_size_set($this->_cPtr,$value);
		if ($var === 'mv_data') return MDB_val_mv_data_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_lmdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'mv_size') return MDB_val_mv_size_get($this->_cPtr);
		if ($var === 'mv_data') return MDB_val_mv_data_get($this->_cPtr);
		if ($var === 'thisown') return swig_lmdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('MDB_val_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MDB_val') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MDB_val();
	}
}

class MDB_stat {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'MDB_stat_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_lmdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'MDB_stat_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_lmdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('MDB_stat_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MDB_stat') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MDB_stat();
	}
}

class MDB_envinfo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'MDB_envinfo_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_lmdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'MDB_envinfo_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_lmdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('MDB_envinfo_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MDB_envinfo') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MDB_envinfo();
	}
}


?>
